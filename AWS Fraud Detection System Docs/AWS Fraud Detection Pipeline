

# Optimized AWS Fraud Detection Pipeline

## Overview
A cost-optimized, serverless fraud detection system leveraging AWS services. This solution provides real-time transaction processing, ML-based fraud detection, and automated alerts while minimizing operational costs.

# Real-time Fraud Detection Pipeline on AWS

This project demonstrates a cost-optimized, serverless, and scalable fraud detection pipeline built on AWS. It leverages the power of machine learning to identify potentially fraudulent transactions in real-time, allowing businesses to take immediate action.  This solution is ideal for any organization dealing with online transactions and looking to minimize fraud losses while keeping infrastructure costs low.

## Key Features

* **Real-time Processing:**  Analyzes transactions as they occur using Kinesis Data Streams for low-latency fraud detection.
* **Machine Learning Powered:** Employs a pre-trained machine learning model deployed on Amazon SageMaker for accurate fraud predictions. (Model details & training data can be found in [MODEL.md](MODEL.md)).
* **Serverless Architecture:**  Utilizes AWS Lambda, API Gateway, and other serverless services, eliminating server management and scaling automatically with demand.
* **Cost-Optimized:** Designed for cost-efficiency through intelligent tiering of data on S3, on-demand Kinesis streams, and pay-per-invocation Lambda functions.
* **Automated Alerting:**  Notifies stakeholders of suspected fraud via SNS (e.g., email, SMS).
* **Secure:** Implements security best practices, including least privilege access and data encryption.
 

1. **Ingestion:** Transactions are ingested via a REST API endpoint exposed through API Gateway. A Lambda function processes the transaction data and streams it to Kinesis Data Streams.

2. **Feature Engineering (Optional):**  If needed, a Lambda function can enrich the transaction data with additional features before sending it to the model.

3. **Fraud Detection:** The real-time transaction stream from Kinesis triggers a Lambda function that invokes the fraud detection model hosted on a SageMaker endpoint.

4. **Alerting:** If fraud is detected, the Lambda function sends an alert via SNS.

5. **Storage:**  Transaction data (raw and enriched) is stored on S3 using intelligent tiering for cost optimization and long-term analysis.  Flagged transactions are stored in DynamoDB for a defined period.


## Getting Started

### Prerequisites

* AWS Account
* AWS CLI configured
* Python 3.9+
* SAM CLI (recommended)

## Architecture Components

### 1. Data Ingestion Layer
```yaml
# Cost-optimized configuration
IngestionStream:
  StreamMode: ON_DEMAND    # Pay per use
  RetentionPeriodHours: 24 # Optimize storage costs

IngestionLambda:
  Runtime: python3.11      # Latest runtime
  MemorySize: 128         # Right-sized memory
  Timeout: 10             # Optimized timeout
```


**Cost Optimization:**
- No base Kinesis shard costs
- Minimal Lambda memory allocation
- Compressed data transfer
- Response caching enabled

### 2. Storage Layer
```yaml
LifecycleConfiguration:
  Rules:
    - TransitionInDays: 30
      StorageClass: STANDARD_IA
    - TransitionInDays: 90
      StorageClass: INTELLIGENT_TIERING
```

**Tiered Storage Strategy:**
1. 0-30 days: Standard S3
2. 30-90 days: Standard-IA
3. 90+ days: Intelligent Tiering
4. Auto-deletion: 365 days

**Cost Benefits:**
- Up to 40% storage cost reduction
- Automated lifecycle management
- Optimized retrieval patterns
- Zero maintenance overhead

### 3. ML Infrastructure
```yaml
ServerlessConfig:
  MaxConcurrency: 50
  MemorySizeInMB: 1024
```

**Features:**
- Serverless SageMaker deployment
- Auto-scaling capabilities
- Pay-per-invocation model
- Optimized memory allocation

**Performance Metrics:**
- Avg. Latency: ~100ms
- Throughput: 100 TPS
- Cold Start: <2s
- Cost/1000 predictions: ~$0.20

### 4. Alert System
```yaml
TransactionTable:
  BillingMode: PAY_PER_REQUEST
  TTL: Enabled
```

**Components:**
- DynamoDB with TTL
- SNS multi-channel alerts
- Auto-expiring records
- Pay-per-request billing

## Deployment Guide


### Quick Start
```bash
# 1. Clone repository
git clone https://github.com/your-repo/Simple-AWS-Fraud-Detection-Pipeline.git
cd Simple-AWS-Fraud-Detection-Pipeline

# Install dependencies
pip install -r requirements.txt


# 2. Deploy stack
aws cloudformation deploy \
  --template-file template.yaml \
  --stack-name fraud-detection \
  --capabilities CAPABILITY_IAM

# 3. Get API endpoint
aws cloudformation describe-stacks \
  --stack-name fraud-detection \
  --query 'Stacks[0].Outputs[?OutputKey==`IngestionApiUrl`].OutputValue'
```

### Testing
```python
# Sample test transaction
import requests
import json

endpoint = "YOUR_API_ENDPOINT"
payload = {
    "amount": 1000,
    "merchant": "Test Store",
    "timestamp": "2024-02-16T10:00:00Z"
}

response = requests.post(endpoint, json=payload)
print(response.json())
```

## Cost Optimization Details

### 1. Ingestion Layer
- API Gateway: ~$1/million requests
- Lambda: ~$0.20/million invocations
- Kinesis: Pay per GB processed

### 2. Storage Layer
- Standard â†’ IA savings: ~65%
- Intelligent Tiering: Auto-optimization
- Lifecycle Rules: Automated management

### 3. ML Infrastructure
- Serverless: No idle costs
- Auto-scaling: Match demand
- Memory optimization: Reduced costs

### 4. Alert System
- DynamoDB: Pay per operation
- TTL: Automatic cleanup
- SNS: Pay per message

## Monitoring Setup

### CloudWatch Metrics
```yaml
# Key metrics to monitor
- API Latency: < 100ms
- Lambda Duration: < 1s
- ML Inference: < 200ms
- Error Rate: < 0.1%
```

### Cost Alarms
```yaml
# Monthly budgets
ApiGateway: $50
Lambda: $30
ML Inference: $100
Storage: $20
```

### Performance Alarms
```yaml
# Alert thresholds
- API 5XX rate > 1%
- Lambda errors > 0.1%
- ML latency > 500ms
```

## Security Features

### Data Protection
```yaml
# S3 configuration
PublicAccessBlockConfiguration:
  BlockPublicAcls: true
  BlockPublicPolicy: true
  IgnorePublicAcls: true
  RestrictPublicBuckets: true
```

### IAM Optimization
```yaml
# Use managed policies
ManagedPolicyArns:
  - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
```

## Scaling Guidelines

### Automatic Scaling
- Kinesis: ON_DEMAND mode
- Lambda: Concurrent executions
- SageMaker: Serverless scaling
- DynamoDB: Auto-scaling

### Manual Optimization
- Monitor CloudWatch metrics
- Adjust memory allocations
- Fine-tune ML endpoints
- Optimize storage lifecycle

## Best Practices

### Development
1. Use Infrastructure as Code
2. Implement CI/CD pipeline
3. Follow least privilege
4. Enable detailed monitoring

### Operations
1. Regular cost review
2. Performance optimization
3. Security assessments
4. Backup strategy

## Support and Maintenance

### Regular Tasks
- Monitor costs daily
- Review performance weekly
- Update dependencies monthly
- Security audit quarterly

### Troubleshooting
- Check CloudWatch Logs
- Monitor error rates
- Review ML metrics
- Analyze cost trends

